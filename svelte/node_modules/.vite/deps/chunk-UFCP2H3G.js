// ../node_modules/@tadashi/hex-id/src/hex-id.js
function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}
function getRandomValues() {
  const uint8 = new Uint8Array(5);
  for (const [k] of uint8.entries()) {
    uint8[k] = getRandomInt(999);
  }
  return uint8;
}
var PROCESS_UNIQUE = getRandomValues();
var cc = Math.floor(Math.random() * 16777215);
function _next() {
  cc += 1 % 16777215;
  return cc;
}
function _toHex(view) {
  const arr = [];
  const len = view.byteLength;
  for (let i = 0; i < len; i++) {
    arr.push(view.getUint8(i).toString(16).padStart(2, "0"));
  }
  return arr.join("");
}
function hexID() {
  const time = ~~(Date.now() / 1e3);
  const inc = _next();
  const buffer = new ArrayBuffer(12);
  const view = new DataView(buffer);
  view.setUint8(3, time & 255);
  view.setUint8(2, time >> 8 & 255);
  view.setUint8(1, time >> 16 & 255);
  view.setUint8(0, time >> 24 & 255);
  view.setUint8(4, PROCESS_UNIQUE[0]);
  view.setUint8(5, PROCESS_UNIQUE[1]);
  view.setUint8(6, PROCESS_UNIQUE[2]);
  view.setUint8(7, PROCESS_UNIQUE[3]);
  view.setUint8(8, PROCESS_UNIQUE[4]);
  view.setUint8(11, inc & 255);
  view.setUint8(10, inc >> 8 & 255);
  view.setUint8(9, inc >> 16 & 255);
  return _toHex(view);
}

export {
  hexID
};
//# sourceMappingURL=chunk-UFCP2H3G.js.map
