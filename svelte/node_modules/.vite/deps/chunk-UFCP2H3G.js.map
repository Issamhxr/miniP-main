{
  "version": 3,
  "sources": ["../../../../node_modules/@tadashi/hex-id/src/hex-id.js"],
  "sourcesContent": ["/**\n * Generates a random integer between 0 (inclusive) and the specified maximum value (exclusive).\n *\n * @param {number} max - The exclusive maximum value for the generated integer.\n * @returns {number} - A random integer between 0 (inclusive) and `max` (exclusive).\n */\nfunction getRandomInt(max) {\n\treturn Math.floor(Math.random() * max)\n}\n\n/**\n * Generates an array of 5 random Uint8 values.\n *\n * @returns {Uint8Array} - An array containing 5 random Uint8 values.\n */\nfunction getRandomValues() {\n\tconst uint8 = new Uint8Array(5)\n\tfor (const [k] of uint8.entries()) {\n\t\tuint8[k] = getRandomInt(999)\n\t}\n\treturn uint8\n}\n\n// A random process unique value\nconst PROCESS_UNIQUE = getRandomValues()\n\n// Initialize a random counter value\nlet cc = Math.floor(Math.random() * 0xffffff)\n\n/**\n * Generates the next counter value.\n *\n * @returns {number} - The next counter value.\n */\nfunction _next() {\n\tcc += 1 % 0xffffff\n\treturn cc\n}\n\n/**\n * Converts a DataView to a hexadecimal string.\n *\n * @param {DataView} view - The DataView to convert.\n * @returns {string} - A hexadecimal string representation of the DataView.\n */\nfunction _toHex(view) {\n\tconst arr = []\n\tconst len = view.byteLength\n\tfor (let i = 0; i < len; i++) {\n\t\tarr.push(view.getUint8(i).toString(16).padStart(2, '0'))\n\t}\n\n\treturn arr.join('')\n}\n\n/**\n * Generates a unique process identifier.\n *\n * @returns {string} - A unique process identifier as a hexadecimal string.\n */\nexport default function hexID() {\n\tconst time = ~~(Date.now() / 1000)\n\tconst inc = _next()\n\tconst buffer = new ArrayBuffer(12)\n\tconst view = new DataView(buffer)\n\n\t// 4-byte timestamp\n\tview.setUint8(3, time & 0xff)\n\tview.setUint8(2, (time >> 8) & 0xff)\n\tview.setUint8(1, (time >> 16) & 0xff)\n\tview.setUint8(0, (time >> 24) & 0xff)\n\n\t// 5-byte process unique\n\tview.setUint8(4, PROCESS_UNIQUE[0])\n\tview.setUint8(5, PROCESS_UNIQUE[1])\n\tview.setUint8(6, PROCESS_UNIQUE[2])\n\tview.setUint8(7, PROCESS_UNIQUE[3])\n\tview.setUint8(8, PROCESS_UNIQUE[4])\n\n\t// 3-byte counter\n\tview.setUint8(11, inc & 0xff)\n\tview.setUint8(10, (inc >> 8) & 0xff)\n\tview.setUint8(9, (inc >> 16) & 0xff)\n\n\treturn _toHex(view)\n}\n"],
  "mappings": ";AAMA,SAAS,aAAa,KAAK;AAC1B,SAAO,KAAK,MAAM,KAAK,OAAO,IAAI,GAAG;AACtC;AAOA,SAAS,kBAAkB;AAC1B,QAAM,QAAQ,IAAI,WAAW,CAAC;AAC9B,aAAW,CAAC,CAAC,KAAK,MAAM,QAAQ,GAAG;AAClC,UAAM,CAAC,IAAI,aAAa,GAAG;AAAA,EAC5B;AACA,SAAO;AACR;AAGA,IAAM,iBAAiB,gBAAgB;AAGvC,IAAI,KAAK,KAAK,MAAM,KAAK,OAAO,IAAI,QAAQ;AAO5C,SAAS,QAAQ;AAChB,QAAM,IAAI;AACV,SAAO;AACR;AAQA,SAAS,OAAO,MAAM;AACrB,QAAM,MAAM,CAAC;AACb,QAAM,MAAM,KAAK;AACjB,WAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC7B,QAAI,KAAK,KAAK,SAAS,CAAC,EAAE,SAAS,EAAE,EAAE,SAAS,GAAG,GAAG,CAAC;AAAA,EACxD;AAEA,SAAO,IAAI,KAAK,EAAE;AACnB;AAOe,SAAR,QAAyB;AAC/B,QAAM,OAAO,CAAC,EAAE,KAAK,IAAI,IAAI;AAC7B,QAAM,MAAM,MAAM;AAClB,QAAM,SAAS,IAAI,YAAY,EAAE;AACjC,QAAM,OAAO,IAAI,SAAS,MAAM;AAGhC,OAAK,SAAS,GAAG,OAAO,GAAI;AAC5B,OAAK,SAAS,GAAI,QAAQ,IAAK,GAAI;AACnC,OAAK,SAAS,GAAI,QAAQ,KAAM,GAAI;AACpC,OAAK,SAAS,GAAI,QAAQ,KAAM,GAAI;AAGpC,OAAK,SAAS,GAAG,eAAe,CAAC,CAAC;AAClC,OAAK,SAAS,GAAG,eAAe,CAAC,CAAC;AAClC,OAAK,SAAS,GAAG,eAAe,CAAC,CAAC;AAClC,OAAK,SAAS,GAAG,eAAe,CAAC,CAAC;AAClC,OAAK,SAAS,GAAG,eAAe,CAAC,CAAC;AAGlC,OAAK,SAAS,IAAI,MAAM,GAAI;AAC5B,OAAK,SAAS,IAAK,OAAO,IAAK,GAAI;AACnC,OAAK,SAAS,GAAI,OAAO,KAAM,GAAI;AAEnC,SAAO,OAAO,IAAI;AACnB;",
  "names": []
}
