import "./chunk-RIXFT5AQ.js";
import "./chunk-KQGVEAJ6.js";
import "./chunk-UGCA3TKY.js";
import {
  fade,
  slide
} from "./chunk-SFHKXS33.js";
import {
  action,
  add_locations,
  append_styles,
  bubble_event,
  check_target,
  cleanup_styles,
  each,
  hmr,
  html,
  if_block,
  init,
  legacy_api,
  onDestroy,
  prop,
  set_attribute,
  set_class,
  setup_stores,
  slot,
  store_get,
  transition,
  validate_each_keys,
  validate_store,
  wrap_snippet,
  writable
} from "./chunk-JURI4ATU.js";
import "./chunk-U7P2NEEE.js";
import {
  append,
  comment,
  from_html
} from "./chunk-YK5NZBWU.js";
import {
  FILENAME,
  HMR,
  child,
  derived_safe_equal,
  event,
  first_child,
  get,
  pop,
  push,
  reset,
  set,
  sibling,
  strict_equals,
  template_effect
} from "./chunk-32TSSXWX.js";
import "./chunk-RVAV4ZRS.js";
import "./chunk-UKRL22FA.js";
import "./chunk-OAH7IFCK.js";
import {
  __export
} from "./chunk-3F74YA3Z.js";

// ../node_modules/@tadashi/svelte-notification/dist/util/store.js
var KEY = Symbol.for("store.notifications");
var singleton = {};
singleton[KEY] = writable(/* @__PURE__ */ new Set([]));
Object.freeze(singleton);
var store_default = singleton[KEY];

// ../node_modules/@tadashi/svelte-notification/dist/util/acts.js
var acts_exports = {};
__export(acts_exports, {
  add: () => add,
  getStore: () => getStore,
  remove: () => remove
});

// ../node_modules/@tadashi/hex-id/src/hex-id.js
function getRandomInt(max) {
  return Math.floor(Math.random() * max);
}
function getRandomValues() {
  const uint8 = new Uint8Array(5);
  for (const [k] of uint8.entries()) {
    uint8[k] = getRandomInt(999);
  }
  return uint8;
}
var PROCESS_UNIQUE = getRandomValues();
var cc = Math.floor(Math.random() * 16777215);
function _next() {
  cc += 1 % 16777215;
  return cc;
}
function _toHex(view) {
  const arr = [];
  const len = view.byteLength;
  for (let i = 0; i < len; i++) {
    arr.push(view.getUint8(i).toString(16).padStart(2, "0"));
  }
  return arr.join("");
}
function hexID() {
  const time = ~~(Date.now() / 1e3);
  const inc = _next();
  const buffer = new ArrayBuffer(12);
  const view = new DataView(buffer);
  view.setUint8(3, time & 255);
  view.setUint8(2, time >> 8 & 255);
  view.setUint8(1, time >> 16 & 255);
  view.setUint8(0, time >> 24 & 255);
  view.setUint8(4, PROCESS_UNIQUE[0]);
  view.setUint8(5, PROCESS_UNIQUE[1]);
  view.setUint8(6, PROCESS_UNIQUE[2]);
  view.setUint8(7, PROCESS_UNIQUE[3]);
  view.setUint8(8, PROCESS_UNIQUE[4]);
  view.setUint8(11, inc & 255);
  view.setUint8(10, inc >> 8 & 255);
  view.setUint8(9, inc >> 16 & 255);
  return _toHex(view);
}

// ../node_modules/@tadashi/svelte-notification/dist/util/acts.js
var base = {
  mode: "normal",
  message: "",
  lifetime: 0
};
function add(notification) {
  notification = {
    ...base,
    ...notification,
    id: `tadashi_svelte_notification_${hexID()}`
  };
  store_default.update((n) => {
    n.add(notification);
    return n;
  });
}
function remove(notification) {
  store_default.update((n) => {
    n.delete(notification);
    return n;
  });
}
function getStore() {
  return store_default;
}

// ../node_modules/@tadashi/svelte-notification/dist/components/Base.svelte
Base[FILENAME] = "C:/Users/shifttech/Desktop/miniP-main/node_modules/@tadashi/svelte-notification/dist/components/Base.svelte";
var root = add_locations(from_html(`<div role="alert" aria-atomic="true"><div class="_tadashi_svelte_notification__content s-yVYLkjvOucrP"><!></div> <button aria-label="Remove notification" class="_tadashi_svelte_notification__btn s-yVYLkjvOucrP"></button></div>`), Base[FILENAME], [[19, 0, [[32, 1], [35, 1]]]]);
var $$css = {
  hash: "s-yVYLkjvOucrP",
  code: "\n	._tadashi_svelte_notification.s-yVYLkjvOucrP {\n		position: relative;\n		display: grid;\n		grid-template-columns: 1fr 40px;\n		grid-gap: 1px;\n		margin: var(--tadashi_svelte_notification_margin, 0 0 0.9em);\n		border-radius: var(--tadashi_svelte_notification_border_radius, 3px);\n		box-shadow: var(--tadashi_svelte_notification_box_shadow, 0 4px 10px hsl(0deg 0% 0% / 10%));\n		overflow: hidden;\n	}\n\n	._tadashi_svelte_notification__content.s-yVYLkjvOucrP {\n		padding: var(--tadashi_svelte_notification__content_padding, 0.9em);\n		box-sizing: border-box;\n		word-wrap: break-word;\n	}\n\n	._tadashi_svelte_notification__btn.s-yVYLkjvOucrP {\n		padding: 0;\n		margin: 0;\n		border: none;\n		border-radius: 0;\n		outline: none;\n		background: none;\n		cursor: pointer;\n		box-sizing: border-box;\n		font-size: var(--tadashi_svelte_notification__btn_font_size, 1.5em);\n		font-family: var(--tadashi_svelte_notification__btn_font_family, monospace);\n	}\n\n	._tadashi_svelte_notification__btn.s-yVYLkjvOucrP:after {\n		content: var(--tadashi_svelte_notification__btn__after_content, 'âœ—');\n	}\n\n	._tadashi_svelte_notification.s-yVYLkjvOucrP > ._tadashi_svelte_notification__content:where(.s-yVYLkjvOucrP),\n	._tadashi_svelte_notification.s-yVYLkjvOucrP > ._tadashi_svelte_notification__btn:where(.s-yVYLkjvOucrP) {\n		background: var(--tadashi_svelte_notification_background, hsl(0deg 100% 100% / 90%));\n		color: var(--tadashi_svelte_notification_color, hsl(0deg 0% 0%));\n	}\n\n	._tadashi_svelte_notification__success.s-yVYLkjvOucrP > ._tadashi_svelte_notification__content:where(.s-yVYLkjvOucrP),\n	._tadashi_svelte_notification__success.s-yVYLkjvOucrP > ._tadashi_svelte_notification__btn:where(.s-yVYLkjvOucrP) {\n		background: var(--tadashi_svelte_notification__success_background, hsl(149deg 96% 42% / 90%));\n		color: var(--tadashi_svelte_notification__success_color, hsl(0deg 100% 100%));\n	}\n\n	._tadashi_svelte_notification__warning.s-yVYLkjvOucrP > ._tadashi_svelte_notification__content:where(.s-yVYLkjvOucrP),\n	._tadashi_svelte_notification__warning.s-yVYLkjvOucrP > ._tadashi_svelte_notification__btn:where(.s-yVYLkjvOucrP) {\n		background: var(--tadashi_svelte_notification__warning_background, hsl(44deg 100% 50% / 90%));\n		color: var(--tadashi_svelte_notification__warning_color, hsl(0deg 0% 0%));\n	}\n\n	._tadashi_svelte_notification__danger.s-yVYLkjvOucrP > ._tadashi_svelte_notification__content:where(.s-yVYLkjvOucrP),\n	._tadashi_svelte_notification__danger.s-yVYLkjvOucrP > ._tadashi_svelte_notification__btn:where(.s-yVYLkjvOucrP) {\n		background: var(--tadashi_svelte_notification__danger_background, hsl(359deg 88% 64% / 90%));\n		color: var(--tadashi_svelte_notification__danger_color, hsl(0deg 100% 100%));\n	}\n\n	._tadashi_svelte_notification__info.s-yVYLkjvOucrP > ._tadashi_svelte_notification__content:where(.s-yVYLkjvOucrP),\n	._tadashi_svelte_notification__info.s-yVYLkjvOucrP > ._tadashi_svelte_notification__btn:where(.s-yVYLkjvOucrP) {\n		background: var(--tadashi_svelte_notification__info_background, hsl(213deg 56% 47% / 90%));\n		color: var(--tadashi_svelte_notification__info_color, hsl(0deg 100% 100%));\n	}\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZS5zdmVsdGUiLCJtYXBwaW5ncyI6IiIsIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiQmFzZS5zdmVsdGUiXX0= */"
};
function Base($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Base);
  append_styles($$anchor, $$css);
  let mode = prop($$props, "mode", 8);
  let id = prop($$props, "id", 8);
  const modes = {
    ok: "Success",
    success: "Success",
    warning: "Warning",
    warn: "Warning",
    error: "Error",
    danger: "Error",
    info: "Information"
  };
  var div = root();
  let classes;
  var div_1 = child(div);
  var node = child(div_1);
  slot(node, $$props, "default", {}, null);
  reset(div_1);
  var button = sibling(div_1, 2);
  reset(div);
  template_effect(
    ($0) => {
      set_attribute(div, "aria-label", (modes == null ? void 0 : modes[mode()]) ?? "Normal");
      set_attribute(div, "aria-describedby", id());
      classes = set_class(div, 1, "_tadashi_svelte_notification s-yVYLkjvOucrP", null, classes, $0);
      set_attribute(div_1, "id", id());
    },
    [
      () => ({
        _tadashi_svelte_notification__success: strict_equals(mode(), "success") || strict_equals(mode(), "ok"),
        _tadashi_svelte_notification__warning: strict_equals(mode(), "warning") || strict_equals(mode(), "warn"),
        _tadashi_svelte_notification__danger: strict_equals(mode(), "danger") || strict_equals(mode(), "error"),
        _tadashi_svelte_notification__info: strict_equals(mode(), "info")
      })
    ],
    derived_safe_equal
  );
  event("click", button, function($$arg) {
    bubble_event.call(this, $$props, $$arg);
  });
  transition(1, div, () => fade);
  transition(2, div, () => slide);
  append($$anchor, div);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Base = hmr(Base, () => Base[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-yVYLkjvOucrP");
    module.default[HMR].source = Base[HMR].source;
    set(Base[HMR].source, module.default[HMR].original);
  });
}
var Base_default = Base;

// ../node_modules/@tadashi/svelte-notification/dist/components/Notification.svelte
Notification[FILENAME] = "C:/Users/shifttech/Desktop/miniP-main/node_modules/@tadashi/svelte-notification/dist/components/Notification.svelte";
function Notification($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Notification);
  let notification = prop($$props, "notification", 8);
  const {
    mode = "normal",
    message = "",
    lifetime = 0,
    id
  } = notification();
  let _timeout;
  if (lifetime > 0) {
    _timeout = setTimeout(
      () => {
        remove(notification());
      },
      lifetime * 1e3
    );
  }
  const onRemoveNotification = () => {
    remove(notification());
  };
  onDestroy(() => {
    if (_timeout) {
      clearTimeout(_timeout);
    }
  });
  init();
  var fragment = comment();
  var node = first_child(fragment);
  Base_default(node, {
    mode,
    id,
    $$events: { click: onRemoveNotification },
    children: wrap_snippet(Notification, ($$anchor2, $$slotProps) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      html(node_1, () => message);
      append($$anchor2, fragment_1);
    }),
    $$slots: { default: true }
  });
  append($$anchor, fragment);
  return pop({ ...legacy_api() });
}
if (import.meta.hot) {
  Notification = hmr(Notification, () => Notification[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Notification[HMR].source;
    set(Notification[HMR].source, module.default[HMR].original);
  });
}
var Notification_default = Notification;

// ../node_modules/@tadashi/svelte-notification/dist/components/Notifications.svelte
Notifications[FILENAME] = "C:/Users/shifttech/Desktop/miniP-main/node_modules/@tadashi/svelte-notification/dist/components/Notifications.svelte";
var root_1 = add_locations(from_html(`<div class="_tadashi_svelte_notifications s-mTbn0kfhO0qG"></div>`), Notifications[FILENAME], [[13, 1]]);
var $$css2 = {
  hash: "s-mTbn0kfhO0qG",
  code: "\n	._tadashi_svelte_notifications.s-mTbn0kfhO0qG {\n		position: fixed;\n		width: var(--tadashi_svelte_notifications_width, 270px);\n		margin: var(--tadashi_svelte_notifications_margin, 0.9em);\n		top: 0;\n		right: 0;\n		z-index: var(--tadashi_svelte_notifications_zindex, 1001);\n	}\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTm90aWZpY2F0aW9ucy5zdmVsdGUiLCJtYXBwaW5ncyI6IiIsIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZXMiOlsiTm90aWZpY2F0aW9ucy5zdmVsdGUiXX0= */"
};
function Notifications($$anchor, $$props) {
  check_target(new.target);
  push($$props, false, Notifications);
  append_styles($$anchor, $$css2);
  const [$$stores, $$cleanup] = setup_stores();
  const $store = () => (validate_store(store_default, "store"), store_get(store_default, "$store", $$stores));
  function init2(node) {
    globalThis.document.body.insertAdjacentElement("beforeend", node);
  }
  init();
  var fragment = comment();
  var node_1 = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_1();
      validate_each_keys(() => [...$store()], (notification) => notification.id);
      each(div, 5, () => [...$store()], (notification) => notification.id, ($$anchor3, notification) => {
        var fragment_1 = comment();
        var node_2 = first_child(fragment_1);
        Notification_default(node_2, {
          get notification() {
            return get(notification);
          }
        });
        append($$anchor3, fragment_1);
      });
      reset(div);
      action(div, ($$node) => init2 == null ? void 0 : init2($$node));
      transition(5, div, () => fade);
      transition(6, div, () => fade);
      append($$anchor2, div);
    };
    if_block(node_1, ($$render) => {
      if ($store().size > 0) $$render(consequent);
    });
  }
  append($$anchor, fragment);
  var $$pop = pop({ ...legacy_api() });
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  Notifications = hmr(Notifications, () => Notifications[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-mTbn0kfhO0qG");
    module.default[HMR].source = Notifications[HMR].source;
    set(Notifications[HMR].source, module.default[HMR].original);
  });
}
var Notifications_default = Notifications;
export {
  Notifications_default as Notifications,
  acts_exports as acts
};
//# sourceMappingURL=@tadashi_svelte-notification.js.map
